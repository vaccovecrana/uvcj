// Generated by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE


#ifdef _WIN32
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __declspec(dllexport)
    #define JNIIMPORT __declspec(dllimport)
    #define JNICALL __stdcall

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#elif defined(__GNUC__) && !defined(__ANDROID__)
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __attribute__((visibility("default")))
    #define JNIIMPORT
    #define JNICALL

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#endif

#include <jni.h>

#ifdef __ANDROID__
    #include <android/log.h>
#elif defined(__APPLE__) && defined(__OBJC__)
    #include <TargetConditionals.h>
    #include <Foundation/Foundation.h>
#elif defined(__APPLE__)
    #include <TargetConditionals.h>
#endif

#ifdef __linux__
    #include <malloc.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <sys/syscall.h>
    #include <sys/sysinfo.h>
    #include <fcntl.h>
    #include <unistd.h>
    #include <dlfcn.h>
    #include <link.h>
    #include <pthread.h>
#elif defined(__APPLE__)
    #include <sys/types.h>
    #include <sys/sysctl.h>
    #include <mach/mach_init.h>
    #include <mach/mach_host.h>
    #include <mach/task.h>
    #include <unistd.h>
    #include <dlfcn.h>
    #include <mach-o/dyld.h>
    #include <pthread.h>
#elif defined(_WIN32) && !defined(NO_WINDOWS_H)
    #define NOMINMAX
    #include <windows.h>
    #include <psapi.h>
#elif defined(_WIN32)
    extern "C" unsigned long __stdcall GetCurrentThreadId();
#endif

#if defined(__ANDROID__) || TARGET_OS_IPHONE
    #define NewWeakGlobalRef(obj) NewGlobalRef(obj)
    #define DeleteWeakGlobalRef(obj) DeleteGlobalRef(obj)
#endif

#include <limits.h>
#include <stddef.h>
#ifndef _WIN32
    #include <stdint.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <exception>
#include <memory>
#include <new>

#define jlong_to_ptr(a) ((void*)(uintptr_t)(a))
#define ptr_to_jlong(a) ((jlong)(uintptr_t)(a))

#if defined(_MSC_VER)
    #define JavaCPP_noinline __declspec(noinline)
    #define JavaCPP_hidden /* hidden by default */
#elif defined(__GNUC__)
    #define JavaCPP_noinline __attribute__((noinline)) __attribute__ ((unused))
    #define JavaCPP_hidden   __attribute__((visibility("hidden"))) __attribute__ ((unused))
#else
    #define JavaCPP_noinline
    #define JavaCPP_hidden
#endif
#if __cplusplus >= 201103L || _MSC_VER >= 1900
    #define JavaCPP_override override
#else
    #define JavaCPP_override
#endif

#include "libuvc/libuvc.h"

static JavaVM* JavaCPP_vm = NULL;
static bool JavaCPP_haveAllocObject = false;
static bool JavaCPP_haveNonvirtual = false;
static const char* JavaCPP_classNames[19] = {
        "org/bytedeco/javacpp/Pointer",
        "java/lang/String",
        "org/bytedeco/javacpp/Pointer$NativeDeallocator",
        "org/bytedeco/javacpp/Loader",
        "java/nio/Buffer",
        "java/lang/Object",
        "java/nio/charset/Charset",
        "io/vacco/uvc/Uvc$UVCFrame",
        "io/vacco/uvc/Uvc$UVCFrameCallback",
        "io/vacco/uvc/Uvc$UVCFormatDesc",
        "java/lang/RuntimeException",
        "java/lang/NullPointerException",
        "org/bytedeco/javacpp/BytePointer",
        "io/vacco/uvc/Uvc$UVCFrameDesc",
        "io/vacco/uvc/Uvc$UVCStreamingInterface",
        "io/vacco/uvc/Uvc$TimeVal",
        "io/vacco/uvc/Uvc$UVCDeviceHandle",
        "io/vacco/uvc/Uvc$UVCStreamCtrl",
        "io/vacco/uvc/Uvc$UVCDeviceDescriptor" };
static jclass JavaCPP_classes[19] = { NULL };
static jfieldID JavaCPP_addressFID = NULL;
static jfieldID JavaCPP_positionFID = NULL;
static jfieldID JavaCPP_limitFID = NULL;
static jfieldID JavaCPP_capacityFID = NULL;
static jfieldID JavaCPP_deallocatorFID = NULL;
static jfieldID JavaCPP_ownerAddressFID = NULL;
static jmethodID JavaCPP_initMID = NULL;
static jmethodID JavaCPP_arrayMID = NULL;
static jmethodID JavaCPP_arrayOffsetMID = NULL;
static jfieldID JavaCPP_bufferPositionFID = NULL;
static jfieldID JavaCPP_bufferLimitFID = NULL;
static jfieldID JavaCPP_bufferCapacityFID = NULL;
static jmethodID JavaCPP_stringMID = NULL;
static jmethodID JavaCPP_getBytesMID = NULL;
static jmethodID JavaCPP_toStringMID = NULL;
#ifdef STRING_BYTES_CHARSET
#ifdef MODIFIED_UTF8_STRING
#pragma message ("warning: STRING_BYTES_CHARSET and MODIFIED_UTF8_STRING are mutually exclusive.")
#endif
static jobject JavaCPP_stringBytesCharset = NULL;
static jmethodID JavaCPP_stringWithCharsetMID = NULL;
static jmethodID JavaCPP_getBytesWithCharsetMID = NULL;
#endif

static inline void JavaCPP_log(const char* fmt, ...) {
    va_list ap;
    va_start(ap, fmt);
#ifdef __ANDROID__
    __android_log_vprint(ANDROID_LOG_ERROR, "javacpp", fmt, ap);
#elif defined(__APPLE__) && defined(__OBJC__)
    NSLogv([NSString stringWithUTF8String:fmt], ap);
#else
    vfprintf(stderr, fmt, ap);
    fprintf(stderr, "\n");
    fflush(stderr);
#endif
    va_end(ap);
}

#if !defined(NO_JNI_DETACH_THREAD) && defined(_WIN32)
#if __cplusplus >= 201103L || _MSC_VER >= 1900
   static thread_local
#else
   static __declspec(thread)
#endif
   struct JavaCPP_thread_local {
       JNIEnv* env = NULL;
       ~JavaCPP_thread_local() {
           if (env && JavaCPP_vm) {
               JavaCPP_vm->DetachCurrentThread();
           }
       }
   } JavaCPP_thread_local; 
#elif !defined(NO_JNI_DETACH_THREAD) && (defined(__linux__) || defined(__APPLE__))
    static pthread_key_t JavaCPP_current_env;
    static JavaCPP_noinline void JavaCPP_detach_env(void *data) {
        if (JavaCPP_vm) {
            JavaCPP_vm->DetachCurrentThread();
        }
    }
    static JavaCPP_noinline void JavaCPP_create_pthread_key(void) {
        pthread_key_create(&JavaCPP_current_env, JavaCPP_detach_env);
    }
#endif

static JavaCPP_noinline jclass JavaCPP_getClass(JNIEnv* env, int i) {
    if (JavaCPP_classes[i] == NULL && env->PushLocalFrame(1) == 0) {
        jclass cls = env->FindClass(JavaCPP_classNames[i]);
        if (cls == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error loading class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        JavaCPP_classes[i] = (jclass)env->NewWeakGlobalRef(cls);
        if (JavaCPP_classes[i] == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        env->PopLocalFrame(NULL);
    }
    return JavaCPP_classes[i];
}

static JavaCPP_noinline jfieldID JavaCPP_getFieldID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jfieldID fid = env->GetFieldID(cls, name, sig);
    if (fid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting field ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return fid;
}

static JavaCPP_noinline jmethodID JavaCPP_getMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jmethodID JavaCPP_getStaticMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetStaticMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting static method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jobject JavaCPP_createPointer(JNIEnv* env, int i, jclass cls = NULL) {
    if (cls == NULL && (cls = JavaCPP_getClass(env, i)) == NULL) {
        return NULL;
    }
    if (JavaCPP_haveAllocObject) {
        return env->AllocObject(cls);
    } else {
        jmethodID mid = env->GetMethodID(cls, "<init>", "(Lorg/bytedeco/javacpp/Pointer;)V");
        if (mid == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error getting Pointer constructor of %s, while VM does not support AllocObject()", JavaCPP_classNames[i]);
            return NULL;
        }
        return env->NewObject(cls, mid, NULL);
    }
}

static JavaCPP_noinline void JavaCPP_initPointer(JNIEnv* env, jobject obj, const void* ptr, jlong size, void* owner, void (*deallocator)(void*)) {
    if (owner != NULL && deallocator != NULL) {
        jvalue args[4];
        args[0].j = ptr_to_jlong(ptr);
        args[1].j = size;
        args[2].j = ptr_to_jlong(owner);
        args[3].j = ptr_to_jlong(deallocator);
        if (JavaCPP_haveNonvirtual) {
            env->CallNonvirtualVoidMethodA(obj, JavaCPP_getClass(env, 0), JavaCPP_initMID, args);
        } else {
            env->CallVoidMethodA(obj, JavaCPP_initMID, args);
        }
    } else {
        env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(ptr));
        env->SetLongField(obj, JavaCPP_limitFID, (jlong)size);
        env->SetLongField(obj, JavaCPP_capacityFID, (jlong)size);
    }
}

#include <string>
static JavaCPP_noinline jstring JavaCPP_createStringFromBytes(JNIEnv* env, const char* ptr, size_t length) {
    if (ptr == NULL) {
        return NULL;
    }
#ifdef MODIFIED_UTF8_STRING
    return env->NewStringUTF(ptr);
#else
    jbyteArray bytes = env->NewByteArray(length < INT_MAX ? length : INT_MAX);
    env->SetByteArrayRegion(bytes, 0, length < INT_MAX ? length : INT_MAX, (signed char*)ptr);
#ifdef STRING_BYTES_CHARSET
    jstring s = (jstring)env->NewObject(JavaCPP_getClass(env, 1), JavaCPP_stringWithCharsetMID, bytes, JavaCPP_stringBytesCharset);
#else
    jstring s = (jstring)env->NewObject(JavaCPP_getClass(env, 1), JavaCPP_stringMID, bytes);
#endif // STRING_BYTES_CHARSET
    env->DeleteLocalRef(bytes);
    return s;
#endif // MODIFIED_UTF8_STRING
}

static JavaCPP_noinline jstring JavaCPP_createStringFromBytes(JNIEnv* env, const char* ptr) {
    if (ptr == NULL) {
        return NULL;
    }
    return JavaCPP_createStringFromBytes(env, ptr, std::char_traits<char>::length(ptr));
}

static JavaCPP_noinline jstring JavaCPP_createStringFromUTF16(JNIEnv* env, const unsigned short* ptr, size_t length) {
    if (ptr == NULL) {
        return NULL;
    }
    return env->NewString(ptr, length);
}

static JavaCPP_noinline jstring JavaCPP_createStringFromUTF16(JNIEnv* env, const unsigned short* ptr) {
    if (ptr == NULL) {
        return NULL;
    }
    return JavaCPP_createStringFromUTF16(env, ptr, std::char_traits<unsigned short>::length(ptr));
}

static JavaCPP_noinline const char* JavaCPP_getStringBytes(JNIEnv* env, jstring str) {
    if (str == NULL) {
        return NULL;
    }
#ifdef MODIFIED_UTF8_STRING
    return env->GetStringUTFChars(str, NULL);
#else
#ifdef STRING_BYTES_CHARSET
    jbyteArray bytes = (jbyteArray)env->CallObjectMethod(str, JavaCPP_getBytesWithCharsetMID, JavaCPP_stringBytesCharset);
#else
    jbyteArray bytes = (jbyteArray)env->CallObjectMethod(str, JavaCPP_getBytesMID);
#endif // STRING_BYTES_CHARSET
    if (bytes == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting bytes from string.");
        return NULL;
    }
    jsize length = env->GetArrayLength(bytes);
    signed char* ptr = new (std::nothrow) signed char[length + 1];
    if (ptr != NULL) {
        env->GetByteArrayRegion(bytes, 0, length, ptr);
        ptr[length] = 0;
    }
    return (const char*)ptr;
#endif // MODIFIED_UTF8_STRING
}

static JavaCPP_noinline void JavaCPP_releaseStringBytes(JNIEnv* env, jstring str, const char* ptr) {
#ifdef MODIFIED_UTF8_STRING
    if (str != NULL && ptr != NULL) {
        env->ReleaseStringUTFChars(str, ptr);
    }
#else
    delete[] ptr;
#endif
}

static JavaCPP_noinline const unsigned short* JavaCPP_getStringUTF16(JNIEnv* env, jstring str) {
    if (str == NULL) {
        return NULL;
    }
    const jsize length = env->GetStringLength(str);
    unsigned short* ptr = new (std::nothrow) unsigned short[length + 1];
    if (ptr != NULL) {
        env->GetStringRegion(str, 0, length, ptr);
        ptr[length] = 0;
    }
    return ptr;
}

static JavaCPP_noinline void JavaCPP_releaseStringUTF16(JNIEnv*, const unsigned short* ptr) {
    delete[] ptr;
}

class JavaCPP_hidden JavaCPP_exception : public std::exception {
public:
    JavaCPP_exception(const char* str) throw() {
        if (str == NULL) {
            strcpy(msg, "Unknown exception.");
        } else {
            strncpy(msg, str, sizeof(msg));
            msg[sizeof(msg) - 1] = 0;
        }
    }
    virtual const char* what() const throw() { return msg; }
    char msg[1024];
};

#ifndef GENERIC_EXCEPTION_CLASS
#define GENERIC_EXCEPTION_CLASS std::exception
#endif
#ifndef GENERIC_EXCEPTION_TOSTRING
#define GENERIC_EXCEPTION_TOSTRING what()
#endif
static JavaCPP_noinline jthrowable JavaCPP_handleException(JNIEnv* env, int i) {
    jstring str = NULL;
    try {
        throw;
    } catch (GENERIC_EXCEPTION_CLASS& e) {
        str = JavaCPP_createStringFromBytes(env, e.GENERIC_EXCEPTION_TOSTRING);
    } catch (...) {
        str = JavaCPP_createStringFromBytes(env, "Unknown exception.");
    }
    jmethodID mid = JavaCPP_getMethodID(env, i, "<init>", "(Ljava/lang/String;)V");
    if (mid == NULL) {
        return NULL;
    }
    return (jthrowable)env->NewObject(JavaCPP_getClass(env, i), mid, str);
}

#if !defined(NO_JNI_DETACH_THREAD) && (defined(__linux__) || defined(__APPLE__))
  static pthread_once_t JavaCPP_once = PTHREAD_ONCE_INIT;
#endif

static JavaCPP_noinline void JavaCPP_detach(bool detach) {
#if !defined(NO_JNI_DETACH_THREAD) && !defined(__linux__) && !defined(__APPLE__) && !defined(_WIN32)
    if (detach && JavaCPP_vm->DetachCurrentThread() != JNI_OK) {
        JavaCPP_log("Could not detach the JavaVM from the current thread.");
    }
#endif
}

static JavaCPP_noinline bool JavaCPP_getEnv(JNIEnv** env) {
    bool attached = false;
    JavaVM *vm = JavaCPP_vm;
    if (vm == NULL) {
            JavaCPP_log("Could not get any created JavaVM.");
            *env = NULL;
            return false;
    }
#if !defined(NO_JNI_DETACH_THREAD) && defined(_WIN32)
    if ((*env = JavaCPP_thread_local.env) != NULL) {
        attached = true;
        goto done;
    }
#elif !defined(NO_JNI_DETACH_THREAD) && (defined(__linux__) || defined(__APPLE__))
    pthread_once(&JavaCPP_once, JavaCPP_create_pthread_key);
    if ((*env = (JNIEnv *)pthread_getspecific(JavaCPP_current_env)) != NULL) {
        attached = true;
        goto done;
    }
#endif
    if (vm->GetEnv((void**)env, JNI_VERSION_1_6) != JNI_OK) {
        struct {
            JNIEnv **env;
            operator JNIEnv**() { return env; } // Android JNI
            operator void**() { return (void**)env; } // standard JNI
        } env2 = { env };
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_6;
        args.group = NULL;
        char name[64] = {0};
#ifdef _WIN32
        sprintf(name, "JavaCPP Thread ID %lu", GetCurrentThreadId());
#elif defined(__APPLE__)
        sprintf(name, "JavaCPP Thread ID %u", pthread_mach_thread_np(pthread_self()));
#elif defined(__linux__)
        sprintf(name, "JavaCPP Thread ID %ld", syscall(SYS_gettid));
#endif
        args.name = name;
        if (vm->AttachCurrentThreadAsDaemon(env2, &args) != JNI_OK) {
            JavaCPP_log("Could not attach the JavaVM to the current thread.");
            *env = NULL;
            goto done;
        }
#if !defined(NO_JNI_DETACH_THREAD) && defined(_WIN32)
        JavaCPP_thread_local.env = *env;
#elif !defined(NO_JNI_DETACH_THREAD) && (defined(__linux__) || defined(__APPLE__))
        pthread_setspecific(JavaCPP_current_env, *env);
#endif
        attached = true;
    }
    if (JavaCPP_vm == NULL) {
        if (JNI_OnLoad(vm, NULL) < 0) {
            JavaCPP_detach(attached);
            *env = NULL;
            goto done;
        }
    }
done:
    return attached;
}

struct JavaCPP_hidden JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback() : ptr(NULL), obj(NULL) { }
    void operator()(::uvc_frame* arg0, void* arg1);
    void (*ptr)(::uvc_frame* arg0, void* arg1);
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback::mid = NULL;


static JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[10];

static void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_deallocate(void *p) { 
    int n = sizeof(JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances) / sizeof(JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[0]);
    for (int i = 0; i < n; i++) { if (JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[i].obj == ((JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback*)p)->obj) JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[i].obj = NULL; }
    JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef((jweak)((JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback*)p)->obj); delete (JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback*)p; JavaCPP_detach(a); }
static void JavaCPP_io_vacco_uvc_Uvc_00024UVCFormatDesc_deallocate(void *p) { delete (::uvc_format_desc*)p; }
static void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameDesc_deallocate(void *p) { delete (::uvc_frame_desc*)p; }
static void JavaCPP_io_vacco_uvc_Uvc_00024TimeVal_deallocate(void *p) { delete (::timeval*)p; }
static void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrame_deallocate(void *p) { delete (::uvc_frame*)p; }
static void JavaCPP_io_vacco_uvc_Uvc_00024UVCStreamCtrl_deallocate(void *p) { delete (::uvc_stream_ctrl_t*)p; }
static void JavaCPP_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_deallocate(void *p) { delete (::uvc_device_descriptor*)p; }
static void JavaCPP_io_vacco_uvc_Uvc_00024UVCFormatDesc_deallocateArray(void* p) { delete[] (::uvc_format_desc*)p; }
static void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameDesc_deallocateArray(void* p) { delete[] (::uvc_frame_desc*)p; }
static void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrame_deallocateArray(void* p) { delete[] (::uvc_frame*)p; }
static void JavaCPP_io_vacco_uvc_Uvc_00024TimeVal_deallocateArray(void* p) { delete[] (::timeval*)p; }
static void JavaCPP_io_vacco_uvc_Uvc_00024UVCStreamCtrl_deallocateArray(void* p) { delete[] (::uvc_stream_ctrl_t*)p; }
static void JavaCPP_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_deallocateArray(void* p) { delete[] (::uvc_device_descriptor*)p; }

static const char* JavaCPP_members[19][20] = {
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { "sizeof", "sequence", "step", "data_bytes", "width", "height", "frame_format", "capture_time", "library_owns_data", "data", "source" },
        { NULL },
        { "sizeof", "bNumFrameDescriptors", "bFormatIndex", "guidFormat", "fourccFormat", "bBitsPerPixel", "bmFlags", "bDefaultFrameIndex", "bAspectRatioX", "bAspectRatioY", "bmInterlaceFlags", "bCopyProtect", "bVariableSize", "frame_descs", "bDescriptorSubtype", "parent", "next", "prev" },
        { NULL },
        { NULL },
        { NULL },
        { "sizeof", "bmCapabilities", "bFrameIndex", "wWidth", "wHeight", "dwMinBitRate", "dwMaxBitRate", "dwMaxVideoFrameBufferSize", "dwDefaultFrameInterval", "dwMinFrameInterval", "dwMaxFrameInterval", "dwFrameIntervalStep", "bFrameIntervalType", "dwBytesPerLine", "intervals", "bDescriptorSubtype", "parent", "next", "prev" },
        { NULL },
        { "sizeof", "tv_sec", "tv_usec" },
        { NULL },
        { "sizeof", "bmHint", "dwFrameInterval", "wKeyFrameRate", "wPFrameRate", "wCompQuality", "wCompWindowSize", "wDelay", "dwMaxVideoFrameSize", "dwMaxPayloadTransferSize", "dwClockFrequency", "bmFramingInfo", "bPreferredVersion", "bMinVersion", "bMaxVersion", "bInterfaceNumber", "bFormatIndex", "bFrameIndex" },
        { "sizeof", "idVendor", "idProduct", "bcdUVC", "serialNumber", "manufacturer", "product" } };
static int JavaCPP_offsets[19][20] = {
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { sizeof(::uvc_frame), offsetof(::uvc_frame, sequence), offsetof(::uvc_frame, step), offsetof(::uvc_frame, data_bytes), offsetof(::uvc_frame, width), offsetof(::uvc_frame, height), offsetof(::uvc_frame, frame_format), offsetof(::uvc_frame, capture_time), offsetof(::uvc_frame, library_owns_data), offsetof(::uvc_frame, data), offsetof(::uvc_frame, source) },
        { -1 },
        { sizeof(::uvc_format_desc), offsetof(::uvc_format_desc, bNumFrameDescriptors), offsetof(::uvc_format_desc, bFormatIndex), offsetof(::uvc_format_desc, guidFormat), offsetof(::uvc_format_desc, fourccFormat), offsetof(::uvc_format_desc, bBitsPerPixel), offsetof(::uvc_format_desc, bmFlags), offsetof(::uvc_format_desc, bDefaultFrameIndex), offsetof(::uvc_format_desc, bAspectRatioX), offsetof(::uvc_format_desc, bAspectRatioY), offsetof(::uvc_format_desc, bmInterlaceFlags), offsetof(::uvc_format_desc, bCopyProtect), offsetof(::uvc_format_desc, bVariableSize), offsetof(::uvc_format_desc, frame_descs), offsetof(::uvc_format_desc, bDescriptorSubtype), offsetof(::uvc_format_desc, parent), offsetof(::uvc_format_desc, next), offsetof(::uvc_format_desc, prev) },
        { -1 },
        { -1 },
        { -1 },
        { sizeof(::uvc_frame_desc), offsetof(::uvc_frame_desc, bmCapabilities), offsetof(::uvc_frame_desc, bFrameIndex), offsetof(::uvc_frame_desc, wWidth), offsetof(::uvc_frame_desc, wHeight), offsetof(::uvc_frame_desc, dwMinBitRate), offsetof(::uvc_frame_desc, dwMaxBitRate), offsetof(::uvc_frame_desc, dwMaxVideoFrameBufferSize), offsetof(::uvc_frame_desc, dwDefaultFrameInterval), offsetof(::uvc_frame_desc, dwMinFrameInterval), offsetof(::uvc_frame_desc, dwMaxFrameInterval), offsetof(::uvc_frame_desc, dwFrameIntervalStep), offsetof(::uvc_frame_desc, bFrameIntervalType), offsetof(::uvc_frame_desc, dwBytesPerLine), offsetof(::uvc_frame_desc, intervals), offsetof(::uvc_frame_desc, bDescriptorSubtype), offsetof(::uvc_frame_desc, parent), offsetof(::uvc_frame_desc, next), offsetof(::uvc_frame_desc, prev) },
        { -1 },
        { sizeof(::timeval), offsetof(::timeval, tv_sec), offsetof(::timeval, tv_usec) },
        { -1 },
        { sizeof(::uvc_stream_ctrl_t), offsetof(::uvc_stream_ctrl_t, bmHint), offsetof(::uvc_stream_ctrl_t, dwFrameInterval), offsetof(::uvc_stream_ctrl_t, wKeyFrameRate), offsetof(::uvc_stream_ctrl_t, wPFrameRate), offsetof(::uvc_stream_ctrl_t, wCompQuality), offsetof(::uvc_stream_ctrl_t, wCompWindowSize), offsetof(::uvc_stream_ctrl_t, wDelay), offsetof(::uvc_stream_ctrl_t, dwMaxVideoFrameSize), offsetof(::uvc_stream_ctrl_t, dwMaxPayloadTransferSize), offsetof(::uvc_stream_ctrl_t, dwClockFrequency), offsetof(::uvc_stream_ctrl_t, bmFramingInfo), offsetof(::uvc_stream_ctrl_t, bPreferredVersion), offsetof(::uvc_stream_ctrl_t, bMinVersion), offsetof(::uvc_stream_ctrl_t, bMaxVersion), offsetof(::uvc_stream_ctrl_t, bInterfaceNumber), offsetof(::uvc_stream_ctrl_t, bFormatIndex), offsetof(::uvc_stream_ctrl_t, bFrameIndex) },
        { sizeof(::uvc_device_descriptor), offsetof(::uvc_device_descriptor, idVendor), offsetof(::uvc_device_descriptor, idProduct), offsetof(::uvc_device_descriptor, bcdUVC), offsetof(::uvc_device_descriptor, serialNumber), offsetof(::uvc_device_descriptor, manufacturer), offsetof(::uvc_device_descriptor, product) } };
static int JavaCPP_memberOffsetSizes[19] = { 1, 1, 1, 1, 1, 1, 1, 11, 1, 18, 1, 1, 1, 19, 1, 3, 1, 18, 7 };

extern "C" {

JNIEXPORT jint JNICALL JNI_OnLoad_jnijavacpp(JavaVM* vm, void* reserved);
JNIEXPORT void JNICALL JNI_OnUnload_jnijavacpp(JavaVM* vm, void* reserved);

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
    if (JNI_OnLoad_jnijavacpp(vm, reserved) == JNI_ERR) {
        return JNI_ERR;
    }
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_6) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_6 inside JNI_OnLoad().");
        return JNI_ERR;
    }
    if (JavaCPP_vm == vm) {
        return env->GetVersion();
    }
    JavaCPP_vm = vm;
    JavaCPP_haveAllocObject = env->functions->AllocObject != NULL;
    JavaCPP_haveNonvirtual = env->functions->CallNonvirtualVoidMethodA != NULL;
    jmethodID putMemberOffsetMID = JavaCPP_getStaticMethodID(env, 3, "putMemberOffset", "(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/Class;");
    if (putMemberOffsetMID == NULL) {
        return JNI_ERR;
    }
    for (int i = 0; i < 19 && !env->ExceptionCheck(); i++) {
        for (int j = 0; j < JavaCPP_memberOffsetSizes[i] && !env->ExceptionCheck(); j++) {
            if (env->PushLocalFrame(3) == 0) {
                jvalue args[3];
                args[0].l = env->NewStringUTF(JavaCPP_classNames[i]);
                args[1].l = JavaCPP_members[i][j] == NULL ? NULL : env->NewStringUTF(JavaCPP_members[i][j]);
                args[2].i = JavaCPP_offsets[i][j];
                jclass cls = (jclass)env->CallStaticObjectMethodA(JavaCPP_getClass(env, 3), putMemberOffsetMID, args);
                if (env->ExceptionCheck()) {
                    JavaCPP_log("Error putting member offsets for class %s.", JavaCPP_classNames[i]);
                    return JNI_ERR;
                }
                JavaCPP_classes[i] = cls == NULL ? NULL : (jclass)env->NewWeakGlobalRef(cls);
                if (env->ExceptionCheck()) {
                    JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
                    return JNI_ERR;
                }
                env->PopLocalFrame(NULL);
            }
        }
    }
    JavaCPP_addressFID = JavaCPP_getFieldID(env, 0, "address", "J");
    if (JavaCPP_addressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_positionFID = JavaCPP_getFieldID(env, 0, "position", "J");
    if (JavaCPP_positionFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_limitFID = JavaCPP_getFieldID(env, 0, "limit", "J");
    if (JavaCPP_limitFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_capacityFID = JavaCPP_getFieldID(env, 0, "capacity", "J");
    if (JavaCPP_capacityFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_deallocatorFID = JavaCPP_getFieldID(env, 0, "deallocator", "Lorg/bytedeco/javacpp/Pointer$Deallocator;");
    if (JavaCPP_deallocatorFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_ownerAddressFID = JavaCPP_getFieldID(env, 2, "ownerAddress", "J");
    if (JavaCPP_ownerAddressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_initMID = JavaCPP_getMethodID(env, 0, "init", "(JJJJ)V");
    if (JavaCPP_initMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_arrayMID = JavaCPP_getMethodID(env, 4, "array", "()Ljava/lang/Object;");
    if (JavaCPP_arrayMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_arrayOffsetMID = JavaCPP_getMethodID(env, 4, "arrayOffset", "()I");
    if (JavaCPP_arrayOffsetMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_bufferPositionFID = JavaCPP_getFieldID(env, 4, "position", "I");
    if (JavaCPP_bufferPositionFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_bufferLimitFID = JavaCPP_getFieldID(env, 4, "limit", "I");
    if (JavaCPP_bufferLimitFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_bufferCapacityFID = JavaCPP_getFieldID(env, 4, "capacity", "I");
    if (JavaCPP_bufferCapacityFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_stringMID = JavaCPP_getMethodID(env, 1, "<init>", "([B)V");
    if (JavaCPP_stringMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_getBytesMID = JavaCPP_getMethodID(env, 1, "getBytes", "()[B");
    if (JavaCPP_getBytesMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_toStringMID = JavaCPP_getMethodID(env, 5, "toString", "()Ljava/lang/String;");
    if (JavaCPP_toStringMID == NULL) {
        return JNI_ERR;
    }
#ifdef STRING_BYTES_CHARSET
    jmethodID charsetForNameMID = JavaCPP_getStaticMethodID(env, 6, "forName", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
    if (charsetForNameMID == NULL) {
        return JNI_ERR;
    }
    jstring charsetName = env->NewStringUTF(STRING_BYTES_CHARSET);
    if (charsetName == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error creating java.lang.String from '%s'", STRING_BYTES_CHARSET);
        return JNI_ERR;
    }
    JavaCPP_stringBytesCharset = env->CallStaticObjectMethod(JavaCPP_getClass(env, 6), charsetForNameMID, charsetName);
    if (JavaCPP_stringBytesCharset == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error when calling Charset.forName() for '%s'", STRING_BYTES_CHARSET);
        return JNI_ERR;
    }
    JavaCPP_stringBytesCharset = env->NewGlobalRef(JavaCPP_stringBytesCharset);
    if (JavaCPP_stringBytesCharset == NULL) {
        JavaCPP_log("Error creating global reference for java.nio.charset.Charset instance");
        return JNI_ERR;
    }
    JavaCPP_stringWithCharsetMID = JavaCPP_getMethodID(env, 1, "<init>", "([BLjava/nio/charset/Charset;)V");
    if (JavaCPP_stringWithCharsetMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_getBytesWithCharsetMID = JavaCPP_getMethodID(env, 1, "getBytes", "(Ljava/nio/charset/Charset;)[B");
    if (JavaCPP_getBytesWithCharsetMID == NULL) {
        return JNI_ERR;
    }
#endif // STRING_BYTES_CHARSET
    return env->GetVersion();
}


JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved) {
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_6) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_6 inside JNI_OnUnLoad().");
        return;
    }
    for (int i = 0; i < 19; i++) {
        env->DeleteWeakGlobalRef((jweak)JavaCPP_classes[i]);
        JavaCPP_classes[i] = NULL;
    }
#ifdef STRING_BYTES_CHARSET
    env->DeleteGlobalRef(JavaCPP_stringBytesCharset);
    JavaCPP_stringBytesCharset = NULL;
#endif
    JNI_OnUnload_jnijavacpp(vm, reserved);
    JavaCPP_vm = NULL;
}

JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[0](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback1(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[1](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback2(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[2](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback3(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[3](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback4(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[4](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback5(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[5](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback6(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[6](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback7(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[7](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback8(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[8](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback9(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[9](arg0, arg1);
}
static void (*JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callbacks[10])(::uvc_frame* arg0, void* arg1) = {
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback1,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback2,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback3,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback4,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback5,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback6,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback7,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback8,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callback9 };
void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback::operator()(::uvc_frame* arg0, void* arg1) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[2];
    jobject obj0 = NULL;
    ::uvc_frame* ptr0 = NULL;
    ptr0 = (::uvc_frame*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 7);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    jobject obj1 = NULL;
    void* ptr1 = NULL;
    ptr1 = (void*)arg1;
    if (ptr1 != NULL) { 
        obj1 = JavaCPP_createPointer(env, 0);
    }
    if (obj1 != NULL) { 
        env->SetLongField(obj1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    }
    args[1].l = obj1;
    if (obj == NULL) {
        obj = JavaCPP_createPointer(env, 8);
        obj = obj == NULL ? NULL : env->NewGlobalRef(obj);
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of io.vacco.uvc.Uvc.UVCFrameCallback instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        for (int i = 0; i < 10; i++) {
            if (this == &JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[i]) {
                ptr = JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_call_callbacks[i];
                break;
            }
        }
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 8, "call", "(Lio/vacco/uvc/Uvc$UVCFrame;Lorg/bytedeco/javacpp/Pointer;)V");
    }
    if (obj == NULL) {
        JavaCPP_log("Function pointer object is NULL in callback for io.vacco.uvc.Uvc.UVCFrameCallback.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public abstract void io.vacco.uvc.Uvc$UVCFrameCallback.call(io.vacco.uvc.Uvc$UVCFrame,org.bytedeco.javacpp.Pointer)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
    env->DeleteLocalRef(obj1);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = JavaCPP_getStringBytes(env, str);
        JavaCPP_exception e(msg);
        JavaCPP_releaseStringBytes(env, str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[0](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback1(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[1](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback2(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[2](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback3(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[3](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback4(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[4](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback5(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[5](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback6(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[6](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback7(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[7](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback8(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[8](arg0, arg1);
}
JNIEXPORT void JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback9(::uvc_frame* arg0, void* arg1) {
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[9](arg0, arg1);
}
static void (*JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callbacks[10])(::uvc_frame* arg0, void* arg1) = {
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback1,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback2,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback3,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback4,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback5,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback6,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback7,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback8,
        JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callback9 };
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of io.vacco.uvc.Uvc.UVCFrameCallback instance for callback.");
        return;
    }
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback* rptr = new (std::nothrow) JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback;
    if (rptr != NULL) {
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_deallocate);
        for (int i = 0; i < 10; i++) {
            if (JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[i].obj == NULL) {
                rptr->ptr = JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_allocate_callbacks[i];
                JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback_instances[i] = *rptr;
                break;
            }
        }
    }
}

JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    jthrowable exc = NULL;
    try {
        ::uvc_format_desc* rptr = new ::uvc_format_desc[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024UVCFormatDesc_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bNumFrameDescriptors__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bNumFrameDescriptors;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bNumFrameDescriptors__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bNumFrameDescriptors = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bFormatIndex__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bFormatIndex;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bFormatIndex__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bFormatIndex = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_guidFormat__IB(JNIEnv* env, jobject obj, jint arg0, jbyte arg1) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->guidFormat[arg0] = (uint8_t)arg1;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_guidFormat__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->guidFormat[arg0];
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_guidFormat__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uint8_t * rptr;
    rptr = (uint8_t *)ptr->guidFormat;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 12);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_fourccFormat__IB(JNIEnv* env, jobject obj, jint arg0, jbyte arg1) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->fourccFormat[arg0] = (uint8_t)arg1;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_fourccFormat__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uint8_t * rptr;
    rptr = (uint8_t *)ptr->fourccFormat;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 12);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_fourccFormat__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->fourccFormat[arg0];
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bBitsPerPixel__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bBitsPerPixel = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bBitsPerPixel__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bBitsPerPixel;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bmFlags__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bmFlags;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bmFlags__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bmFlags = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bDefaultFrameIndex__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bDefaultFrameIndex = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bDefaultFrameIndex__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bDefaultFrameIndex;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bAspectRatioX__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bAspectRatioX = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bAspectRatioX__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bAspectRatioX;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bAspectRatioY__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bAspectRatioY;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bAspectRatioY__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bAspectRatioY = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bmInterlaceFlags__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bmInterlaceFlags = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bmInterlaceFlags__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bmInterlaceFlags;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bCopyProtect__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bCopyProtect = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bCopyProtect__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bCopyProtect;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bVariableSize__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bVariableSize = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bVariableSize__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bVariableSize;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_frame_1descs__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::uvc_frame_desc* rptr;
    rptr = ptr->frame_descs;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 13);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_frame_1descs__Lio_vacco_uvc_Uvc_00024UVCFrameDesc_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::uvc_frame_desc* ptr0 = arg0 == NULL ? NULL : (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->frame_descs = ptr0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bDescriptorSubtype__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uvc_vs_desc_subtype rval = (uvc_vs_desc_subtype)ptr->bDescriptorSubtype;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_bDescriptorSubtype__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bDescriptorSubtype = (uvc_vs_desc_subtype)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_parent__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::uvc_streaming_interface* rptr;
    rptr = ptr->parent;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 14);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_parent__Lio_vacco_uvc_Uvc_00024UVCStreamingInterface_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::uvc_streaming_interface* ptr0 = arg0 == NULL ? NULL : (::uvc_streaming_interface*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = obj;
    ptr->parent = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_next__Lio_vacco_uvc_Uvc_00024UVCFormatDesc_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::uvc_format_desc* ptr0 = arg0 == NULL ? NULL : (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->next = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_next__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::uvc_format_desc* rptr;
    rptr = ptr->next;
    if (rptr == ptr) {
        rarg = obj;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 9);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_prev__(JNIEnv* env, jobject obj) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::uvc_format_desc* rptr;
    rptr = ptr->prev;
    if (rptr == ptr) {
        rarg = obj;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 9);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_prev__Lio_vacco_uvc_Uvc_00024UVCFormatDesc_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_format_desc* ptr = (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::uvc_format_desc* ptr0 = arg0 == NULL ? NULL : (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->prev = ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024UVCFormatDesc_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::uvc_format_desc* rptr = new ::uvc_format_desc();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024UVCFormatDesc_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    jthrowable exc = NULL;
    try {
        ::uvc_frame_desc* rptr = new ::uvc_frame_desc[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameDesc_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_bmCapabilities__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bmCapabilities;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_bmCapabilities__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bmCapabilities = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_bFrameIndex__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bFrameIndex;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_bFrameIndex__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bFrameIndex = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_wWidth__S(JNIEnv* env, jobject obj, jshort arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->wWidth = (uint16_t)arg0;
    return rarg;
}
JNIEXPORT jshort JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_wWidth__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    uint16_t rval = (uint16_t)ptr->wWidth;
    rarg = (jshort)rval;
    return rarg;
}
JNIEXPORT jshort JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_wHeight__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    uint16_t rval = (uint16_t)ptr->wHeight;
    rarg = (jshort)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_wHeight__S(JNIEnv* env, jobject obj, jshort arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->wHeight = (uint16_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwMinBitRate__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dwMinBitRate = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwMinBitRate__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->dwMinBitRate;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwMaxBitRate__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dwMaxBitRate = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwMaxBitRate__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->dwMaxBitRate;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwMaxVideoFrameBufferSize__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->dwMaxVideoFrameBufferSize;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwMaxVideoFrameBufferSize__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dwMaxVideoFrameBufferSize = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwDefaultFrameInterval__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dwDefaultFrameInterval = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwDefaultFrameInterval__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->dwDefaultFrameInterval;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwMinFrameInterval__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dwMinFrameInterval = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwMinFrameInterval__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->dwMinFrameInterval;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwMaxFrameInterval__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->dwMaxFrameInterval;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwMaxFrameInterval__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dwMaxFrameInterval = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwFrameIntervalStep__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dwFrameIntervalStep = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwFrameIntervalStep__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->dwFrameIntervalStep;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_bFrameIntervalType__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bFrameIntervalType = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_bFrameIntervalType__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bFrameIntervalType;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwBytesPerLine__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dwBytesPerLine = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_dwBytesPerLine__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->dwBytesPerLine;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_intervals__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    uint32_t * rptr;
    rptr = (uint32_t *)ptr->intervals;
    jlong rcapacity = rptr != NULL ? 1 : 0;
    if (rptr != NULL) {
        jlong rcapacityptr = rcapacity * sizeof(rptr[0]);
        rarg = env->NewDirectByteBuffer((void*)rptr, rcapacityptr < INT_MAX ? rcapacityptr : INT_MAX);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_intervals__Ljava_nio_IntBuffer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    int* ptr0 = arg0 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg0);
    jintArray arr0 = NULL;
    jlong offset0 = 0;
    if (arg0 != NULL && ptr0 == NULL) {
        arr0 = (jintArray)env->CallObjectMethod(arg0, JavaCPP_arrayMID);
        offset0 = env->CallIntMethod(arg0, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr0 = arr0 == NULL ? NULL : env->GetIntArrayElements(arr0, NULL) + offset0;
        }
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_bufferPositionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->intervals = (uint32_t *)ptr0;
    if (arr0 != NULL) env->ReleaseIntArrayElements(arr0, (jint*)(ptr0 - position0), 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_bDescriptorSubtype__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uvc_vs_desc_subtype rval = (uvc_vs_desc_subtype)ptr->bDescriptorSubtype;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_bDescriptorSubtype__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bDescriptorSubtype = (uvc_vs_desc_subtype)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_parent__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::uvc_format_desc* rptr;
    rptr = ptr->parent;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 9);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_parent__Lio_vacco_uvc_Uvc_00024UVCFormatDesc_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::uvc_format_desc* ptr0 = arg0 == NULL ? NULL : (::uvc_format_desc*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->parent = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_next__Lio_vacco_uvc_Uvc_00024UVCFrameDesc_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::uvc_frame_desc* ptr0 = arg0 == NULL ? NULL : (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->next = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_next__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::uvc_frame_desc* rptr;
    rptr = ptr->next;
    if (rptr == ptr) {
        rarg = obj;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 13);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_prev__(JNIEnv* env, jobject obj) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::uvc_frame_desc* rptr;
    rptr = ptr->prev;
    if (rptr == ptr) {
        rarg = obj;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 13);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_prev__Lio_vacco_uvc_Uvc_00024UVCFrameDesc_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_frame_desc* ptr = (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::uvc_frame_desc* ptr0 = arg0 == NULL ? NULL : (::uvc_frame_desc*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->prev = ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrameDesc_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::uvc_frame_desc* rptr = new ::uvc_frame_desc();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameDesc_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_sequence__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->sequence = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_sequence__(JNIEnv* env, jobject obj) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->sequence;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_step__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->step = (size_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_step__(JNIEnv* env, jobject obj) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    size_t rval = (size_t)ptr->step;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    jthrowable exc = NULL;
    try {
        ::uvc_frame* rptr = new ::uvc_frame[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024UVCFrame_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_data_1bytes__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->data_bytes = (size_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_data_1bytes__(JNIEnv* env, jobject obj) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    size_t rval = (size_t)ptr->data_bytes;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_width__(JNIEnv* env, jobject obj) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->width;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_width__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->width = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_height__(JNIEnv* env, jobject obj) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->height;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_height__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->height = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_frame_1format__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->frame_format = (uvc_frame_format)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_frame_1format__(JNIEnv* env, jobject obj) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uvc_frame_format rval = (uvc_frame_format)ptr->frame_format;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_capture_1time__(JNIEnv* env, jobject obj) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::timeval* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::timeval(ptr->capture_time);
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_vacco_uvc_Uvc_00024TimeVal_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_capture_1time__Lio_vacco_uvc_Uvc_00024TimeVal_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::timeval* ptr0 = arg0 == NULL ? NULL : (::timeval*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->capture_time = *ptr0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_library_1owns_1data__(JNIEnv* env, jobject obj) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->library_owns_data;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_library_1owns_1data__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->library_owns_data = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_data__(JNIEnv* env, jobject obj) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    rptr = ptr->data;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_data__Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->data = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_source__(JNIEnv* env, jobject obj) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::uvc_device_handle* rptr;
    rptr = ptr->source;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 16);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_source__Lio_vacco_uvc_Uvc_00024UVCDeviceHandle_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_frame* ptr = (::uvc_frame*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = obj;
    ptr->source = ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024UVCFrame_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::uvc_frame* rptr = new ::uvc_frame();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024UVCFrame_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024TimeVal_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    jthrowable exc = NULL;
    try {
        ::timeval* rptr = new ::timeval[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024TimeVal_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024TimeVal_tv_1sec__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::timeval* ptr = (::timeval*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->tv_sec = arg0;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_vacco_uvc_Uvc_00024TimeVal_tv_1sec__(JNIEnv* env, jobject obj) {
    ::timeval* ptr = (::timeval*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jlong rval = ptr->tv_sec;
    rarg = (jlong)rval;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_vacco_uvc_Uvc_00024TimeVal_tv_1usec__(JNIEnv* env, jobject obj) {
    ::timeval* ptr = (::timeval*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jlong rval = ptr->tv_usec;
    rarg = (jlong)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024TimeVal_tv_1usec__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::timeval* ptr = (::timeval*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->tv_usec = arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024TimeVal_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::timeval* rptr = new ::timeval();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024TimeVal_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    jthrowable exc = NULL;
    try {
        ::uvc_stream_ctrl_t* rptr = new ::uvc_stream_ctrl_t[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024UVCStreamCtrl_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jshort JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bmHint__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    uint16_t rval = (uint16_t)ptr->bmHint;
    rarg = (jshort)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bmHint__S(JNIEnv* env, jobject obj, jshort arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bmHint = (uint16_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_dwFrameInterval__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->dwFrameInterval;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_dwFrameInterval__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dwFrameInterval = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_wKeyFrameRate__S(JNIEnv* env, jobject obj, jshort arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->wKeyFrameRate = (uint16_t)arg0;
    return rarg;
}
JNIEXPORT jshort JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_wKeyFrameRate__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    uint16_t rval = (uint16_t)ptr->wKeyFrameRate;
    rarg = (jshort)rval;
    return rarg;
}
JNIEXPORT jshort JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_wPFrameRate__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    uint16_t rval = (uint16_t)ptr->wPFrameRate;
    rarg = (jshort)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_wPFrameRate__S(JNIEnv* env, jobject obj, jshort arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->wPFrameRate = (uint16_t)arg0;
    return rarg;
}
JNIEXPORT jshort JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_wCompQuality__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    uint16_t rval = (uint16_t)ptr->wCompQuality;
    rarg = (jshort)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_wCompQuality__S(JNIEnv* env, jobject obj, jshort arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->wCompQuality = (uint16_t)arg0;
    return rarg;
}
JNIEXPORT jshort JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_wCompWindowSize__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    uint16_t rval = (uint16_t)ptr->wCompWindowSize;
    rarg = (jshort)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_wCompWindowSize__S(JNIEnv* env, jobject obj, jshort arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->wCompWindowSize = (uint16_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_wDelay__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->wDelay = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_wDelay__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->wDelay;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_dwMaxVideoFrameSize__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dwMaxVideoFrameSize = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_dwMaxVideoFrameSize__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->dwMaxVideoFrameSize;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_dwMaxPayloadTransferSize__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dwMaxPayloadTransferSize = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_dwMaxPayloadTransferSize__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->dwMaxPayloadTransferSize;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_dwClockFrequency__I(JNIEnv* env, jobject obj, jint arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dwClockFrequency = (uint32_t)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_dwClockFrequency__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    uint32_t rval = (uint32_t)ptr->dwClockFrequency;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bmFramingInfo__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bmFramingInfo;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bmFramingInfo__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bmFramingInfo = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bPreferredVersion__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bPreferredVersion;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bPreferredVersion__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bPreferredVersion = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bMinVersion__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bMinVersion;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bMinVersion__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bMinVersion = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bMaxVersion__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bMaxVersion = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bMaxVersion__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bMaxVersion;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bInterfaceNumber__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bInterfaceNumber = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bInterfaceNumber__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bInterfaceNumber;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bFormatIndex__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bFormatIndex = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bFormatIndex__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bFormatIndex;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bFrameIndex__(JNIEnv* env, jobject obj) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    uint8_t rval = (uint8_t)ptr->bFrameIndex;
    rarg = (jbyte)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_bFrameIndex__B(JNIEnv* env, jobject obj, jbyte arg0) {
    ::uvc_stream_ctrl_t* ptr = (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bFrameIndex = (uint8_t)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024UVCStreamCtrl_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::uvc_stream_ctrl_t* rptr = new ::uvc_stream_ctrl_t();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024UVCStreamCtrl_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    jthrowable exc = NULL;
    try {
        ::uvc_device_descriptor* rptr = new ::uvc_device_descriptor[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_idVendor__S(JNIEnv* env, jobject obj, jshort arg0) {
    ::uvc_device_descriptor* ptr = (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->idVendor = (uint16_t)arg0;
    return rarg;
}
JNIEXPORT jshort JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_idVendor__(JNIEnv* env, jobject obj) {
    ::uvc_device_descriptor* ptr = (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    uint16_t rval = (uint16_t)ptr->idVendor;
    rarg = (jshort)rval;
    return rarg;
}
JNIEXPORT jshort JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_idProduct__(JNIEnv* env, jobject obj) {
    ::uvc_device_descriptor* ptr = (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    uint16_t rval = (uint16_t)ptr->idProduct;
    rarg = (jshort)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_idProduct__S(JNIEnv* env, jobject obj, jshort arg0) {
    ::uvc_device_descriptor* ptr = (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->idProduct = (uint16_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_bcdUVC__S(JNIEnv* env, jobject obj, jshort arg0) {
    ::uvc_device_descriptor* ptr = (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->bcdUVC = (uint16_t)arg0;
    return rarg;
}
JNIEXPORT jshort JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_bcdUVC__(JNIEnv* env, jobject obj) {
    ::uvc_device_descriptor* ptr = (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    uint16_t rval = (uint16_t)ptr->bcdUVC;
    rarg = (jshort)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_serialNumber__(JNIEnv* env, jobject obj) {
    ::uvc_device_descriptor* ptr = (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)ptr->serialNumber;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 12);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_serialNumber__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_device_descriptor* ptr = (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->serialNumber = (char*)ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_manufacturer__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_device_descriptor* ptr = (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->manufacturer = (char*)ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_manufacturer__(JNIEnv* env, jobject obj) {
    ::uvc_device_descriptor* ptr = (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)ptr->manufacturer;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 12);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_product__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::uvc_device_descriptor* ptr = (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->product = (char*)ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_product__(JNIEnv* env, jobject obj) {
    ::uvc_device_descriptor* ptr = (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 11), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)ptr->product;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 12);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::uvc_device_descriptor* rptr = new ::uvc_device_descriptor();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_vacco_uvc_Uvc_00024UVCDeviceDescriptor_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}






JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1init(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::uvc_context* ptr0 = arg0 == NULL ? NULL : (::uvc_context*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::libusb_context* ptr1 = arg1 == NULL ? NULL : (::libusb_context*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_init((arg0 == NULL ? NULL : &ptr0), ptr1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arg0 != NULL) env->SetLongField(arg0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1find_1device(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2, jint arg3, jstring arg4) {
    ::uvc_context* ptr0 = arg0 == NULL ? NULL : (::uvc_context*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::uvc_device* ptr1 = arg1 == NULL ? NULL : (::uvc_device*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    const char* ptr4 = JavaCPP_getStringBytes(env, arg4);
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_find_device(ptr0, (arg1 == NULL ? NULL : &ptr1), arg2, arg3, ptr4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arg1 != NULL) env->SetLongField(arg1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    JavaCPP_releaseStringBytes(env, arg4, ptr4);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_uvc_1ref_1device(JNIEnv* env, jclass cls, jobject arg0) {
    ::uvc_device* ptr0 = arg0 == NULL ? NULL : (::uvc_device*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        uvc_ref_device(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1open(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::uvc_device* ptr0 = arg0 == NULL ? NULL : (::uvc_device*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::uvc_device_handle* ptr1 = arg1 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_open(ptr0, (arg1 == NULL ? NULL : &ptr1));
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arg1 != NULL) env->SetLongField(arg1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1device_1descriptor(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::uvc_device* ptr0 = arg0 == NULL ? NULL : (::uvc_device*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    void** ptr1 = arg1 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_device_descriptor(ptr0, (uvc_device_descriptor**)ptr1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_uvc_1free_1device_1descriptor(JNIEnv* env, jclass cls, jobject arg0) {
    ::uvc_device_descriptor* ptr0 = arg0 == NULL ? NULL : (::uvc_device_descriptor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        uvc_free_device_descriptor(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1format_1descs(JNIEnv* env, jclass cls, jobject arg0) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    const ::uvc_format_desc* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const ::uvc_format_desc*)uvc_get_format_descs(ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_uvc_1close(JNIEnv* env, jclass cls, jobject arg0) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        uvc_close(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_uvc_1unref_1device(JNIEnv* env, jclass cls, jobject arg0) {
    ::uvc_device* ptr0 = arg0 == NULL ? NULL : (::uvc_device*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        uvc_unref_device(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_uvc_1exit(JNIEnv* env, jclass cls, jobject arg0) {
    ::uvc_context* ptr0 = arg0 == NULL ? NULL : (::uvc_context*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        uvc_exit(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1stream_1ctrl_1format_1size(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2, jint arg3, jint arg4, jint arg5) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::uvc_stream_ctrl_t* ptr1 = arg1 == NULL ? NULL : (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_stream_ctrl_format_size(ptr0, ptr1, (uvc_frame_format)arg2, arg3, arg4, arg5);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1probe_1stream_1ctrl(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::uvc_stream_ctrl_t* ptr1 = arg1 == NULL ? NULL : (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_probe_stream_ctrl(ptr0, ptr1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1start_1streaming(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jbyte arg4) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::uvc_stream_ctrl_t* ptr1 = arg1 == NULL ? NULL : (::uvc_stream_ctrl_t*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback* ptr2 = arg2 == NULL ? NULL : (JavaCPP_io_vacco_uvc_Uvc_00024UVCFrameCallback*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    char* ptr3 = arg3 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_start_streaming(ptr0, ptr1, (ptr2 == NULL ? NULL : ptr2->ptr), ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_uvc_1stop_1streaming(JNIEnv* env, jclass cls, jobject arg0) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        uvc_stop_streaming(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1scanning_1mode(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_scanning_mode(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1scanning_1mode(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_scanning_mode(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1ae_1mode(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_ae_mode(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1ae_1mode(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_ae_mode(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1ae_1priority(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_ae_priority(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1ae_1priority(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_ae_priority(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1exposure_1abs(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg1);
    jintArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jintArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetIntArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_exposure_abs(ptr0, (uint32_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseIntArrayElements(arr1, (jint*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1exposure_1abs(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_exposure_abs(ptr0, (uint32_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1exposure_1rel(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_exposure_rel(ptr0, (int8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1exposure_1rel(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_exposure_rel(ptr0, (int8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1focus_1abs(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_focus_abs(ptr0, (uint16_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1focus_1abs(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_focus_abs(ptr0, (uint16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1focus_1rel(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jint arg3) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg2);
    jbyteArray arr2 = NULL;
    jlong offset2 = 0;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jbyteArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        offset2 = env->CallIntMethod(arg2, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetByteArrayElements(arr2, NULL) + offset2;
        }
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetIntField(arg2, JavaCPP_bufferPositionFID);
    ptr2 += position2;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_focus_rel(ptr0, (int8_t *)ptr1, (uint8_t *)ptr2, (uvc_req_code)arg3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (arr2 != NULL) env->ReleaseByteArrayElements(arr2, (jbyte*)(ptr2 - position2), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1focus_1rel(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1, jbyte arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_focus_rel(ptr0, (int8_t)arg1, (uint8_t)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1focus_1simple_1range(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_focus_simple_range(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1focus_1simple_1range(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_focus_simple_range(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1focus_1auto(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_focus_auto(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1focus_1auto(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_focus_auto(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1iris_1abs(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_iris_abs(ptr0, (uint16_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1iris_1abs(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_iris_abs(ptr0, (uint16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1iris_1rel(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_iris_rel(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1iris_1rel(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_iris_rel(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1zoom_1abs(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_zoom_abs(ptr0, (uint16_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1zoom_1abs(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_zoom_abs(ptr0, (uint16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1zoom_1rel(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jint arg4) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg2);
    jbyteArray arr2 = NULL;
    jlong offset2 = 0;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jbyteArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        offset2 = env->CallIntMethod(arg2, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetByteArrayElements(arr2, NULL) + offset2;
        }
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetIntField(arg2, JavaCPP_bufferPositionFID);
    ptr2 += position2;
    signed char* ptr3 = arg3 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg3);
    jbyteArray arr3 = NULL;
    jlong offset3 = 0;
    if (arg3 != NULL && ptr3 == NULL) {
        arr3 = (jbyteArray)env->CallObjectMethod(arg3, JavaCPP_arrayMID);
        offset3 = env->CallIntMethod(arg3, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr3 = arr3 == NULL ? NULL : env->GetByteArrayElements(arr3, NULL) + offset3;
        }
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetIntField(arg3, JavaCPP_bufferPositionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_zoom_rel(ptr0, (int8_t *)ptr1, (uint8_t *)ptr2, (uint8_t *)ptr3, (uvc_req_code)arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (arr2 != NULL) env->ReleaseByteArrayElements(arr2, (jbyte*)(ptr2 - position2), 0);
    if (arr3 != NULL) env->ReleaseByteArrayElements(arr3, (jbyte*)(ptr3 - position3), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1zoom_1rel(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1, jbyte arg2, jbyte arg3) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_zoom_rel(ptr0, (int8_t)arg1, (uint8_t)arg2, (uint8_t)arg3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1pantilt_1abs(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jint arg3) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    int* ptr2 = arg2 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_pantilt_abs(ptr0, ptr1, ptr2, (uvc_req_code)arg3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1pantilt_1abs(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_pantilt_abs(ptr0, (int32_t)arg1, (int32_t)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1pantilt_1rel(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jint arg5) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg2);
    jbyteArray arr2 = NULL;
    jlong offset2 = 0;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jbyteArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        offset2 = env->CallIntMethod(arg2, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetByteArrayElements(arr2, NULL) + offset2;
        }
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetIntField(arg2, JavaCPP_bufferPositionFID);
    ptr2 += position2;
    signed char* ptr3 = arg3 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg3);
    jbyteArray arr3 = NULL;
    jlong offset3 = 0;
    if (arg3 != NULL && ptr3 == NULL) {
        arr3 = (jbyteArray)env->CallObjectMethod(arg3, JavaCPP_arrayMID);
        offset3 = env->CallIntMethod(arg3, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr3 = arr3 == NULL ? NULL : env->GetByteArrayElements(arr3, NULL) + offset3;
        }
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetIntField(arg3, JavaCPP_bufferPositionFID);
    ptr3 += position3;
    signed char* ptr4 = arg4 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg4);
    jbyteArray arr4 = NULL;
    jlong offset4 = 0;
    if (arg4 != NULL && ptr4 == NULL) {
        arr4 = (jbyteArray)env->CallObjectMethod(arg4, JavaCPP_arrayMID);
        offset4 = env->CallIntMethod(arg4, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr4 = arr4 == NULL ? NULL : env->GetByteArrayElements(arr4, NULL) + offset4;
        }
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetIntField(arg4, JavaCPP_bufferPositionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_pantilt_rel(ptr0, (int8_t *)ptr1, (uint8_t *)ptr2, (int8_t *)ptr3, (uint8_t *)ptr4, (uvc_req_code)arg5);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (arr2 != NULL) env->ReleaseByteArrayElements(arr2, (jbyte*)(ptr2 - position2), 0);
    if (arr3 != NULL) env->ReleaseByteArrayElements(arr3, (jbyte*)(ptr3 - position3), 0);
    if (arr4 != NULL) env->ReleaseByteArrayElements(arr4, (jbyte*)(ptr4 - position4), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1pantilt_1rel(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1, jbyte arg2, jbyte arg3, jbyte arg4) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_pantilt_rel(ptr0, (int8_t)arg1, (uint8_t)arg2, (int8_t)arg3, (uint8_t)arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1roll_1abs(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_roll_abs(ptr0, ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1roll_1abs(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_roll_abs(ptr0, (int16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1roll_1rel(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jint arg3) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg2);
    jbyteArray arr2 = NULL;
    jlong offset2 = 0;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jbyteArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        offset2 = env->CallIntMethod(arg2, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetByteArrayElements(arr2, NULL) + offset2;
        }
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetIntField(arg2, JavaCPP_bufferPositionFID);
    ptr2 += position2;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_roll_rel(ptr0, (int8_t *)ptr1, (uint8_t *)ptr2, (uvc_req_code)arg3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (arr2 != NULL) env->ReleaseByteArrayElements(arr2, (jbyte*)(ptr2 - position2), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1roll_1rel(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1, jbyte arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_roll_rel(ptr0, (int8_t)arg1, (uint8_t)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1privacy(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_privacy(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1privacy(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_privacy(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1digital_1window(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jobject arg5, jobject arg6, jint arg7) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    short* ptr2 = arg2 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg2);
    jshortArray arr2 = NULL;
    jlong offset2 = 0;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jshortArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        offset2 = env->CallIntMethod(arg2, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetShortArrayElements(arr2, NULL) + offset2;
        }
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetIntField(arg2, JavaCPP_bufferPositionFID);
    ptr2 += position2;
    short* ptr3 = arg3 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg3);
    jshortArray arr3 = NULL;
    jlong offset3 = 0;
    if (arg3 != NULL && ptr3 == NULL) {
        arr3 = (jshortArray)env->CallObjectMethod(arg3, JavaCPP_arrayMID);
        offset3 = env->CallIntMethod(arg3, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr3 = arr3 == NULL ? NULL : env->GetShortArrayElements(arr3, NULL) + offset3;
        }
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetIntField(arg3, JavaCPP_bufferPositionFID);
    ptr3 += position3;
    short* ptr4 = arg4 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg4);
    jshortArray arr4 = NULL;
    jlong offset4 = 0;
    if (arg4 != NULL && ptr4 == NULL) {
        arr4 = (jshortArray)env->CallObjectMethod(arg4, JavaCPP_arrayMID);
        offset4 = env->CallIntMethod(arg4, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr4 = arr4 == NULL ? NULL : env->GetShortArrayElements(arr4, NULL) + offset4;
        }
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetIntField(arg4, JavaCPP_bufferPositionFID);
    ptr4 += position4;
    short* ptr5 = arg5 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg5);
    jshortArray arr5 = NULL;
    jlong offset5 = 0;
    if (arg5 != NULL && ptr5 == NULL) {
        arr5 = (jshortArray)env->CallObjectMethod(arg5, JavaCPP_arrayMID);
        offset5 = env->CallIntMethod(arg5, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr5 = arr5 == NULL ? NULL : env->GetShortArrayElements(arr5, NULL) + offset5;
        }
    }
    jlong position5 = arg5 == NULL ? 0 : env->GetIntField(arg5, JavaCPP_bufferPositionFID);
    ptr5 += position5;
    short* ptr6 = arg6 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg6);
    jshortArray arr6 = NULL;
    jlong offset6 = 0;
    if (arg6 != NULL && ptr6 == NULL) {
        arr6 = (jshortArray)env->CallObjectMethod(arg6, JavaCPP_arrayMID);
        offset6 = env->CallIntMethod(arg6, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr6 = arr6 == NULL ? NULL : env->GetShortArrayElements(arr6, NULL) + offset6;
        }
    }
    jlong position6 = arg6 == NULL ? 0 : env->GetIntField(arg6, JavaCPP_bufferPositionFID);
    ptr6 += position6;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_digital_window(ptr0, (uint16_t *)ptr1, (uint16_t *)ptr2, (uint16_t *)ptr3, (uint16_t *)ptr4, (uint16_t *)ptr5, (uint16_t *)ptr6, (uvc_req_code)arg7);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (arr2 != NULL) env->ReleaseShortArrayElements(arr2, (jshort*)(ptr2 - position2), 0);
    if (arr3 != NULL) env->ReleaseShortArrayElements(arr3, (jshort*)(ptr3 - position3), 0);
    if (arr4 != NULL) env->ReleaseShortArrayElements(arr4, (jshort*)(ptr4 - position4), 0);
    if (arr5 != NULL) env->ReleaseShortArrayElements(arr5, (jshort*)(ptr5 - position5), 0);
    if (arr6 != NULL) env->ReleaseShortArrayElements(arr6, (jshort*)(ptr6 - position6), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1digital_1window(JNIEnv* env, jclass cls, jobject arg0, jshort arg1, jshort arg2, jshort arg3, jshort arg4, jshort arg5, jshort arg6) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_digital_window(ptr0, (uint16_t)arg1, (uint16_t)arg2, (uint16_t)arg3, (uint16_t)arg4, (uint16_t)arg5, (uint16_t)arg6);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1digital_1roi(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jobject arg5, jint arg6) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    short* ptr2 = arg2 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg2);
    jshortArray arr2 = NULL;
    jlong offset2 = 0;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jshortArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        offset2 = env->CallIntMethod(arg2, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetShortArrayElements(arr2, NULL) + offset2;
        }
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetIntField(arg2, JavaCPP_bufferPositionFID);
    ptr2 += position2;
    short* ptr3 = arg3 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg3);
    jshortArray arr3 = NULL;
    jlong offset3 = 0;
    if (arg3 != NULL && ptr3 == NULL) {
        arr3 = (jshortArray)env->CallObjectMethod(arg3, JavaCPP_arrayMID);
        offset3 = env->CallIntMethod(arg3, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr3 = arr3 == NULL ? NULL : env->GetShortArrayElements(arr3, NULL) + offset3;
        }
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetIntField(arg3, JavaCPP_bufferPositionFID);
    ptr3 += position3;
    short* ptr4 = arg4 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg4);
    jshortArray arr4 = NULL;
    jlong offset4 = 0;
    if (arg4 != NULL && ptr4 == NULL) {
        arr4 = (jshortArray)env->CallObjectMethod(arg4, JavaCPP_arrayMID);
        offset4 = env->CallIntMethod(arg4, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr4 = arr4 == NULL ? NULL : env->GetShortArrayElements(arr4, NULL) + offset4;
        }
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetIntField(arg4, JavaCPP_bufferPositionFID);
    ptr4 += position4;
    short* ptr5 = arg5 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg5);
    jshortArray arr5 = NULL;
    jlong offset5 = 0;
    if (arg5 != NULL && ptr5 == NULL) {
        arr5 = (jshortArray)env->CallObjectMethod(arg5, JavaCPP_arrayMID);
        offset5 = env->CallIntMethod(arg5, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr5 = arr5 == NULL ? NULL : env->GetShortArrayElements(arr5, NULL) + offset5;
        }
    }
    jlong position5 = arg5 == NULL ? 0 : env->GetIntField(arg5, JavaCPP_bufferPositionFID);
    ptr5 += position5;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_digital_roi(ptr0, (uint16_t *)ptr1, (uint16_t *)ptr2, (uint16_t *)ptr3, (uint16_t *)ptr4, (uint16_t *)ptr5, (uvc_req_code)arg6);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (arr2 != NULL) env->ReleaseShortArrayElements(arr2, (jshort*)(ptr2 - position2), 0);
    if (arr3 != NULL) env->ReleaseShortArrayElements(arr3, (jshort*)(ptr3 - position3), 0);
    if (arr4 != NULL) env->ReleaseShortArrayElements(arr4, (jshort*)(ptr4 - position4), 0);
    if (arr5 != NULL) env->ReleaseShortArrayElements(arr5, (jshort*)(ptr5 - position5), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1digital_1roi(JNIEnv* env, jclass cls, jobject arg0, jshort arg1, jshort arg2, jshort arg3, jshort arg4, jshort arg5) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_digital_roi(ptr0, (uint16_t)arg1, (uint16_t)arg2, (uint16_t)arg3, (uint16_t)arg4, (uint16_t)arg5);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1backlight_1compensation(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_backlight_compensation(ptr0, (uint16_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1backlight_1compensation(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_backlight_compensation(ptr0, (uint16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1brightness(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_brightness(ptr0, ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1brightness(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_brightness(ptr0, (int16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1contrast(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_contrast(ptr0, (uint16_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1contrast(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_contrast(ptr0, (uint16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1contrast_1auto(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_contrast_auto(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1contrast_1auto(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_contrast_auto(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1gain(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_gain(ptr0, (uint16_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1gain(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_gain(ptr0, (uint16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1power_1line_1frequency(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_power_line_frequency(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1power_1line_1frequency(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_power_line_frequency(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1hue(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_hue(ptr0, ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1hue(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_hue(ptr0, (int16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1hue_1auto(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_hue_auto(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1hue_1auto(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_hue_auto(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1saturation(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_saturation(ptr0, (uint16_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1saturation(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_saturation(ptr0, (uint16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1sharpness(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_sharpness(ptr0, (uint16_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1sharpness(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_sharpness(ptr0, (uint16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1gamma(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_gamma(ptr0, (uint16_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1gamma(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_gamma(ptr0, (uint16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1white_1balance_1temperature(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_white_balance_temperature(ptr0, (uint16_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1white_1balance_1temperature(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_white_balance_temperature(ptr0, (uint16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1white_1balance_1temperature_1auto(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_white_balance_temperature_auto(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1white_1balance_1temperature_1auto(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_white_balance_temperature_auto(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1white_1balance_1component(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jint arg3) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    short* ptr2 = arg2 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg2);
    jshortArray arr2 = NULL;
    jlong offset2 = 0;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jshortArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        offset2 = env->CallIntMethod(arg2, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetShortArrayElements(arr2, NULL) + offset2;
        }
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetIntField(arg2, JavaCPP_bufferPositionFID);
    ptr2 += position2;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_white_balance_component(ptr0, (uint16_t *)ptr1, (uint16_t *)ptr2, (uvc_req_code)arg3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (arr2 != NULL) env->ReleaseShortArrayElements(arr2, (jshort*)(ptr2 - position2), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1white_1balance_1component(JNIEnv* env, jclass cls, jobject arg0, jshort arg1, jshort arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_white_balance_component(ptr0, (uint16_t)arg1, (uint16_t)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1white_1balance_1component_1auto(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_white_balance_component_auto(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1white_1balance_1component_1auto(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_white_balance_component_auto(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1digital_1multiplier(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_digital_multiplier(ptr0, (uint16_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1digital_1multiplier(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_digital_multiplier(ptr0, (uint16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1digital_1multiplier_1limit(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    short* ptr1 = arg1 == NULL ? NULL : (short*)env->GetDirectBufferAddress(arg1);
    jshortArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jshortArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetShortArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_digital_multiplier_limit(ptr0, (uint16_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseShortArrayElements(arr1, (jshort*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1digital_1multiplier_1limit(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_digital_multiplier_limit(ptr0, (uint16_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1analog_1video_1standard(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_analog_video_standard(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1analog_1video_1standard(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_analog_video_standard(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1analog_1video_1lock_1status(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_analog_video_lock_status(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1analog_1video_1lock_1status(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_analog_video_lock_status(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1input_1select(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_input_select(ptr0, (uint8_t *)ptr1, (uvc_req_code)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1set_1input_1select(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_set_input_select(ptr0, (uint8_t)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1bus_1number(JNIEnv* env, jclass cls, jobject arg0) {
    ::uvc_device* ptr0 = arg0 == NULL ? NULL : (::uvc_device*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jbyte rarg = 0;
    jthrowable exc = NULL;
    try {
        signed char rval = uvc_get_bus_number(ptr0);
        rarg = (jbyte)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1device_1address(JNIEnv* env, jclass cls, jobject arg0) {
    ::uvc_device* ptr0 = arg0 == NULL ? NULL : (::uvc_device*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jbyte rarg = 0;
    jthrowable exc = NULL;
    try {
        signed char rval = uvc_get_device_address(ptr0);
        rarg = (jbyte)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1any2rgb(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::uvc_frame* ptr0 = arg0 == NULL ? NULL : (::uvc_frame*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    ::uvc_frame* ptr1 = arg1 == NULL ? NULL : (::uvc_frame*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_any2rgb(ptr0, ptr1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1mjpeg2rgb(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::uvc_frame* ptr0 = arg0 == NULL ? NULL : (::uvc_frame*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    ::uvc_frame* ptr1 = arg1 == NULL ? NULL : (::uvc_frame*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_mjpeg2rgb(ptr0, ptr1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_vacco_uvc_Uvc_uvc_1allocate_1frame(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::uvc_frame* rptr;
    jthrowable exc = NULL;
    try {
        rptr = uvc_allocate_frame((size_t)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 7);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_uvc_1free_1frame(JNIEnv* env, jclass cls, jobject arg0) {
    ::uvc_frame* ptr0 = arg0 == NULL ? NULL : (::uvc_frame*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        uvc_free_frame(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_uvc_1print_1diag(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::uvc_device_handle* ptr0 = arg0 == NULL ? NULL : (::uvc_device_handle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        uvc_print_diag(ptr0, (FILE*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_io_vacco_uvc_Uvc_uvc_1get_1device_1list(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::uvc_context* ptr0 = arg0 == NULL ? NULL : (::uvc_context*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    void** ptr1 = arg1 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = uvc_get_device_list(ptr0, (uvc_device***)(arg1 == NULL ? NULL : &ptr1));
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    ptr1 -= position1;
    if (arg1 != NULL) env->SetLongField(arg1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_vacco_uvc_Uvc_uvc_1free_1device_1list(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    void** ptr0 = arg0 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        uvc_free_device_list((uvc_device**)(arg0 == NULL ? NULL : &ptr0), (uint8_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 10);
    }

    ptr0 -= position0;
    if (arg0 != NULL) env->SetLongField(arg0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    if (exc != NULL) {
        env->Throw(exc);
    }
}

}

